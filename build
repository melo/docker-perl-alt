#!/usr/bin/env perl

use strict;
use warnings;
use autodie;
use Getopt::Long;

sub usage {
  die "Usage: $0 [--push] [--filter=s]\n";
}

my %cfg = (repo => 'melopt/perl-alt');
GetOptions(\%cfg, 'help|?', 'push', 'filter=s', 'repo=s', 'multiplatform') or usage();
usage() if $cfg{help};

my $repo = $cfg{repo};

my @versions = (
  ['alpine', 'latest', '3.18'],
  ['alpine', 'next',   'edge'],
  ['alpine', 'edge',   'edge'],
  ['alpine', 'legacy', '3.9'],
  ['perl',   'latest', '5.38-slim', 1],
  ['perl',   'full',   '5.38'],
);

## Multiplatform support
my @plats;
my $docker_cmd = 'docker';
if ($cfg{multiplatform}) {
  $docker_cmd = 'nerdctl';
  push @plats, '--platform', 'linux/arm64,linux/amd64';
  print ">>>>>>>>>>> MULTIPLATFORM Build detected: @plats\n";
  sleep(5);
}

for my $spec (@versions) {
  my ($f, $t, $v, $x) = @$spec;
  my $baset = "$repo:$f-$t";
  my $basev = "$repo:$f-$v";

  my @tags;
  for my $target (qw( devel build runtime reply )) {
    my $tagt = "$baset-$target";
    my $tagv = "$basev-$target";
    my $tagx = $x                         ? "$target" : "";
    my $tagl = $x && $target eq 'runtime' ? "latest"  : "";

    next if $cfg{filter} and $tagt !~ m/$cfg{filter}/;

    print ">>>> target $target, base $v: $tagt\n";
    print ">>>> target $target, base $v: $tagv\n";
    print ">>>> also tagged: $tagx\n" if $tagx;
    print ">>>> also tagged: $tagl\n" if $tagl;
    print "\n";

    my @itags = ($tagt, $tagv);
    push @itags, $tagx if $tagx;
    push @itags, $tagl if $tagl;
    push @itags, $baset if $target eq "devel";

    my $err = my_system(
      $docker_cmd, qw(build --target),
      $target,     '--file', "Dockerfile.$f", (map { ('--tag', $_) } @itags),
      '--label',   'maintainer=Pedro Melo <melo@simplicidade.org>',
      @plats,      '--build-arg', "BASE=$f:$v", '.'
    );
    die "FATAL: failed to build Docker image\n" if $err;

    push @tags, @itags;
      
    if ($cfg{push}) {
      my_system($docker_cmd, 'push', @plats, $_) for @tags;
      @tags = ();
    }
  }
}


print "\n\n>>> DONE\n\n";

sub my_system {
  print "\n\n>>>>>>>> Cmd: @_\n\n";
  return system(@_);
}
