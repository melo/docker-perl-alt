#!/usr/bin/env perl

use strict;
use warnings;
use autodie;
use Getopt::Long;

sub usage {
  die "Usage: $0 [--push] [--filter=s]\n";
}

my %cfg = (repo => 'melopt/perl-alt');
GetOptions(\%cfg, 'help|?', 'push', 'filter=s', 'repo=s') or usage();
usage() if $cfg{help};

my $repo = $cfg{repo};

my @versions = (
  ['alpine', 'latest', '3.17'],
  ['alpine', 'next',   'edge'],
  ['alpine', 'edge',   'edge'],
  ['alpine', 'legacy', '3.9'],
  ['perl',   'latest', '5.36-slim', 1],
  ['perl',   'full',   '5.36'],
);

my @tags;
for my $spec (@versions) {
  my ($f, $t, $v, $x) = @$spec;
  my $baset = "$repo:$f-$t";
  my $basev = "$repo:$f-$v";

  for my $target (qw( devel build runtime reply )) {
    my $tagt = "$baset-$target";
    my $tagv = "$basev-$target";
    my $tagx = $x                         ? "$target" : "";
    my $tagl = $x && $target eq 'runtime' ? "latest"  : "";


    next if $cfg{filter} and $tagt !~ m/$cfg{filter}/;

    print ">>>> target $target, base $v: $tagt\n";
    print ">>>> target $target, base $v: $tagv\n";
    print ">>>> also tagged: $tagx\n" if $tagx;
    print ">>>> also tagged: $tagl\n" if $tagl;
    print "\n";

    my @itags = ($tagt, $tagv);
    push @itags, $tagx if $tagx;
    push @itags, $tagl if $tagl;

    my $err = my_system(
      qw(docker build --target),
      $target,       '--file',     "Dockerfile.$f", (map { ('--tag', $_) } @itags),
      '--build-arg', "BASE=$f:$v", '.'
    );
    die "FATAL: failed to build Docker image\n" if $err;

    push @tags, @itags;
  }

  my_system(qw(docker tag), "$baset-devel", $baset);
  push @tags, $baset;
}

if ($cfg{push}) {
  my_system('docker', 'push', $_) for @tags;
}

sub my_system {
  print ">>>>>>>> Cmd: @_\n";
  return system(@_);
}
