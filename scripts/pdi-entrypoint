#!/usr/bin/env perl
#
# Default entrypoint script
#

use strict;
use warnings;
use autodie;
use Path::Tiny;
use Config;

## Update the CPAN deps if PDI_UPDATE_DEPS is present
system('/usr/bin/pdi-build-deps') if $ENV{PDI_UPDATE_DEPS};

## Collect folders for PERL5LIB
my @incs = ('/app/lib');

## Search for submodules
my $base = path('/app/elib');
if ($base->is_dir) {
  for my $sm ($base->children) {
    my $sml = $sm->child('lib');
    next unless $sml->is_dir;

    push @incs, $sml->stringify;
  }
}

## Add deps
for my $d ('/deps', '/stack') {
  for my $s ('lib', 'local/lib/perl5', "local/lib/perl5/$Config{'archname'}") {
    push @incs, "$d/$s" if -d "$d/$s";
  }
}

## Generate final PERL5LIB
$ENV{PERL5LIB} = join(':', grep {$_} (@incs, $ENV{PERL5LIB}));

## Per project entrypoint support :)
my @entrypoint;
push @entrypoint, '/entrypoint' if -x '/entrypoint';

## Lambda support!
my $lambda_handlers  = path('/app/lambda-handlers');
my $lambda_runtime   = path($ENV{LAMBDA_RUNTIME_DIR} || '/var/runtime');
my $lambda_task_root = path($ENV{LAMBDA_TASK_ROOT}   || '/var/task');  

my $lambda_env_type  = running_in_lambda($lambda_handlers, @ARGV);
if ($lambda_env_type) {
  $ENV{PDI_LAMBDA_ENV_TYPE} = $lambda_env_type;
  $ENV{LAMBDA_TASK_ROOT}   ||= "$lambda_task_root";
  $ENV{LAMBDA_RUNTIME_DIR} ||= "$lambda_runtime";

  push @entrypoint, '/usr/local/bin/aws-lambda-rie' if $lambda_env_type eq 'rie';
  push @entrypoint, $lambda_runtime->child('bootstrap')->stringify;
}

## Exec the command
if (@ARGV) {
  exec(@entrypoint, @ARGV);
  die "FATAL: failed to exec '@ARGV': $!\n";
}

for ('/bin/bash', '/bin/sh') { exec(@entrypoint, $_) if -x }
die "FATAL: could not find any shell!!!\n";


##############################################
#### Detect if we are and can run under lambda
sub running_in_lambda {
  my (undef, $cmd) = @_;
  my $has_handler = check_for_lambda_handlers(@_);

  if ($ENV{AWS_LAMBDA_RUNTIME_API}) {
    die "FATAL: ENV AWS_LAMBDA_RUNTIME_API set, but handler script '$cmd' not found\n" unless $has_handler;
    return 'aws';
  }
  return 'rie' if $ENV{PDI_LAMBDA_EMULATOR};
  return 'rie' if $has_handler;

  return;
}

sub check_for_lambda_handlers {
  my ($lambda_handlers, $cmd) = @_;
  return unless $lambda_handlers->is_dir;
  return unless @_ == 2 and $cmd =~ m/^(.+?)\.(.+)/ and $lambda_handlers->child("$1.pl")->exists;

  return 1;
}
