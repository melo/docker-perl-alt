#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;

################################################
# Usage

sub usage {
  die <<EOU;
Usage: pdi-build-deps [<options>] [<cpanfile>]

Uses the cpanfile (and cpanfile.snapshot, if present) files to install
the Perl dependencies we need.

You can use a different name ('cpanfile' is only the default) by passing
along the file as a parameter (the <cpanfile> in the usage above).

This script supports two modes:

  * app dependencies (the default): installed under /deps;
  * stack dependencies: installed under /stack

The default is to install app dependencies, use --stack to install stack
dependencies.

You can also use layers, sets of cpanfile/cpanfile.snapshots that can
be placed at /deps/layers/<layer-name>. These can be installed with
the --layer=X option.


Options:

  --help, -?       This message

  --stack          Install dependencies for the stack
  --layer=X        Install dependencies for layer X
  --skip-snapshot  Ignore the cpanfile.snapshot, even if present

  --all            Installl dependencies for all phases. By default
                   we will skip suggests, configure, and develop

EOU
}


################################################
# Main logic

### Parse our options and deal with bad ones or --help
my $ok = GetOptions(\my %opts, 'stack', 'skip-snapshot', 'all', 'verbose', 'layer=s', 'help|?');
usage() unless $ok;
usage() if $opts{help};

my $cpanfile = $ARGV[0] || 'cpanfile';
my $snapshot = "${cpanfile}.snapshot";

### Layer support: use layer-specific cpanfile's
if (my $layer = $opts{layer}) {
  my $dir = "/deps/layers/$layer";
  die "FATAL: --layer requires $dir to exist with cpanfile for layer deps\n" unless -e "$dir/cpanfile";

  $cpanfile  = 'cpanfile';
  $snapshot  = 'cpanfile.snapshot';
  $opts{all} = 1;
  delete $opts{stack};
  chdir($dir);
}

### We need at least the cpanfile
die "FATAL: no '$cpanfile' file found\n" unless -e $cpanfile;


### Try to use a dynamic number of workers based on the server available CPUs
my $workers = 4;                                                            ## the CPM default
my $cpuinfo = do { local $/; open(my $fh, '<', '/proc/cpuinfo'); <$fh> };
if ($cpuinfo) {
  my @cores = $cpuinfo =~ m/^(processor)\s*:\s*\d+$/gsm;
  $workers = @cores * 2;
}


### Prepare our cmds, decide on final deployment or just recreate the snapshot
my @cpm_cmd = ('cpm', 'install', '--workers', $workers, '-L', 'local/', '--no-prebuilt', '--no-test');
push @cpm_cmd, '--mirror', '/mirror', '--resolver', '02packages,/mirror', '--resolver', 'metadb' if -d '/mirror';
push @cpm_cmd, '--verbose' if $opts{verbose};

my @carton_cmd = ('carton', 'install');
push @carton_cmd, '--deployment' unless $opts{'skip-snapshot'} or not -e $snapshot;

if ($opts{all}) {
  push @cpm_cmd, '--with-develop', '--with-configure', '--with-suggests';
}
else {
  push @cpm_cmd, '--without-develop', '--without-configure', '--without-suggests';
  push @carton_cmd, '--without', 'develop,configure,suggests';
}


### Destination dir for deps depends on app or stack mode
my $deps_dir = $opts{stack} ? '/stack' : '/deps';


### Prepare the cpanfiles required
system('/bin/cp', $cpanfile, "$deps_dir/cpanfile");
if   (-e $snapshot and !$opts{'skip-snapshot'}) { system('/bin/cp', $snapshot, "$deps_dir/cpanfile.snapshot") }
else                                            { system('/bin/rm', '-f',      "$deps_dir/cpanfile.snapshot") }
chdir($deps_dir);


### Take care of running cpm to install eveything, first time with felling
print "\n\n*** First run - install stuff using '@cpm_cmd'\n\n";
my $error = run_cmd(@cpm_cmd);


### If we don't get a perfect build, we retry the same command
### to make sure the build.log is the smallest possible to
### show off the error, and then we dump it. If the second time
### the install is perfect, oh well, we'll just move on...
### Maybe we should die anyway but dump the previous log?
if ($error) {
  print "\n\n*** ERROR: command exit code $error, retrying to get a smaller log file\n\n";
  $error = run_cmd(@cpm_cmd);

  if ($error) {
    print "\n\n*** Dumping build.log output:\n\n";
    system('/bin/cat', "$ENV{HOME}/.perl-cpm/build.log");
    print "\n\n*** End of build.log file\n\n";
    exit(1);
  }

  print "\n\n*** Hmms... Second run of '@cpm_cmd' was ok, go figure... Continuing...\n\n";
}


### All is well with the world, so lets use Carton to generate the
### cpanfile.snapshot -- please note that we only do this if
### --skip-snapshot if used, because in that case we don't use the snapshot,
### we want to recreate it

if ($opts{'skip-snapshot'}) {
  print "\n*** Running Carton to generate cpanfile.snapshot: '@carton_cmd'\n\n";
  $error = run_cmd(@carton_cmd);
  if ($error) {
    print "\n\n*** ERROR: command exit code $ok, dumping log file:\n\n";
    system('/bin/cat', "$ENV{HOME}/.cpanm/build.log");
    print "\n\n*** End of build.log file\n\n";
    exit(1);
  }
}


### Final cleanup
print "\n\n*** Deps instalation complete, cleaning up...\n\n";
exec('/bin/rm', '-rf', 'local/cache', "$ENV{HOME}/.cpanm*", "$ENV{HOME}/.perl-cpm");
die "FATAL: failed to exec() '/bin/rm': $!";


################################################
# Helpers

sub run_cmd {
  system(@_);
  return 0 if $? == 0;
  return $? >> 8;
}
